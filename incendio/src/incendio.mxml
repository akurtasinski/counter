<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
    creationComplete="onLoad()" width="950" height="500">
    <mx:Style source="assets/styles.css"/>
    <mx:Script>
        <![CDATA[
        	import flare.util.Shapes;
        	import flare.vis.operator.layout.StackedAreaLayout;
        	import flare.vis.data.DataSprite;
        	import flare.vis.data.DataList;
        	import flare.vis.data.ScaleBinding;
        	import flare.util.Colors;
        	import flare.util.palette.ColorPalette;
        	import flare.util.Dates;
        	import flare.data.DataTable;
        	import flare.data.DataUtil;
        	import flare.data.DataField;
        	import flare.data.DataSource;
        	import flare.data.DataSet;
        	import flare.data.DataSchema;
        	import mx.core.UIComponent;
        	import flare.vis.operator.encoder.ShapeEncoder;
        	import flare.scale.ScaleType;
        	import flare.vis.operator.encoder.ColorEncoder;
        	import flare.vis.operator.layout.AxisLayout;
        	import flare.vis.Visualization;
        	import flare.vis.data.Data;
        	import mx.events.ListEvent;
        	import model.*;
        	
        private const ACCTS:Array = [['AIM', 'cyenatwork'], ['AIM', 'thensheburns'], ['GTalk','christineyen@gmail.com'], ['GTalk', 'temp']];
        private const CURRENT_ACCT:Array = ACCTS[0];
        private const COLORS:Object = { BLACK: flare.util.Colors.rgba(0, 0, 0),
                                        WHITE: Colors.rgba(255, 255, 255),
                                        CERULEAN: Colors.rgba(0, 51, 255),
                                        GREEN: Colors.rgba(0, 153, 102) };
        private var userId:int; 
        
		private var dir:File;
		private var conn:SQLConnection;
		[Bindable] private var buddies:Array;
		
		private var convSchema:DataSchema = new DataSchema(
		    new DataField('buddySN', DataUtil.STRING),
		    new DataField('size', DataUtil.INT),
		    new DataField('initiated', DataUtil.BOOLEAN),
		    new DataField('msgsTotal', DataUtil.INT),
		    new DataField('msgsUser', DataUtil.INT),
		    new DataField('duration', DataUtil.INT),
		    new DataField('startTime', DataUtil.DATE));
	    var graph:UIComponent;
	    var vis:Visualization;
		
		private function onLoad():void {
            this.vis = new Visualization();
            vis.bounds = new Rectangle(400, 0, 350, 350);
            vis.x = 0;
            vis.y = 0; 
            
            this.graph = new UIComponent();
            this.graph.addChild(vis);
            this.addChildAt(graph, 0);
			
			this.dir = File.userDirectory.resolvePath('Library/Application Support/Adium 2.0/Users/Default/LogsBackup/' + CURRENT_ACCT.join('.'));
			var sqlFile:File = File.applicationStorageDirectory.resolvePath('db/' + CURRENT_ACCT.join('.') + '.db');
			
			this.conn = new SQLConnection();
            
            try {
	            conn.open(sqlFile, SQLMode.UPDATE);
	            conn.attach('incendio', sqlFile);
                trace('opened database');            	
            } catch (error:SQLError) {
                trace("Error opening database");
				trace("error.message:", error.message);
				trace("error.details:", error.details);
				return;
            }
			
			this.createTables();
            
            convertNewFormat();
			this.userId = Util.getUser(this.conn, this.CURRENT_ACCT[1]);
			
			this.buddies = BuddySummary.getAll(this.conn, this.userId);
		}
		
		// TODO: move me
		/**
		 * @params
		 * arr - an Array of DataLists
		 **/
		private function visualize(arg:Object):void {
//            arg.data.createEdges("data.startTime");
            
            this.vis.data = arg.data;
            trace(arg.columns.toString());
//            vis.operators.add(new ColorEncoder("data.initiated", Data.NODES,
//                "fillColor", ScaleType.QUANTILE, new ColorPalette([COLORS.BLACK, COLORS.CERULEAN])));
//            vis.operators.add(new ColorEncoder("data.startTime", Data.EDGES,
//                "lineColor", ScaleType.QUANTILE, new ColorPalette([COLORS.BLACK])));
            trace(vis.data.nodes.length);
            vis.data.nodes.visit(function(d:DataSprite):void {
                d.fillColor = COLORS.BLACK;
                d.fillAlpha = 1;
                d.lineAlpha = 1;
                d.shape = Shapes.POLYGON;

            });
            
            vis.operators.add(new StackedAreaLayout(arg.columns));
                
//            var axisLayout:AxisLayout = new AxisLayout("data.startTime", "data.size");
//            axisLayout.xScale.bins = 10;
//            vis.operators.add(axisLayout);
            vis.data.nodes.setProperties({lineWidth:0, size:0.6});
            vis.update();
            
            
            return;
		}
		
		private function fetchSummaries():Array {
			var allData:Array = [];
            for each (var buddyDir:File in this.dir.getDirectoryListing()) {
                if (buddyDir.name == '.DS_STORE') continue;
                allData.push(this.getSummary(buddyDir.name));
            }
			return allData;
		}
		
		private function getSummary(buddyName:String):BuddySummary {
			var bs:BuddySummary = new BuddySummary(buddyName, -1, this.conn);
			
			if (bs.nil() || bs.ts < this.dir.resolvePath(buddyName).modificationDate) {
				var attrs:Array = loadSummary(buddyName);
				bs.ct = attrs[0];
				bs.size = attrs[1];
				bs.ts = attrs[2];
			} else {
                trace('got data for ' + buddyName + ': ' + bs.toString());
			}
			return bs;
		}
		
		private function loadSummary(buddyName:String):Array {
			trace('calculating data for ' + buddyName)
			var ct:int = 0;
			var size:int = 0;
			var buddyId:int = Util.getUser(this.conn, buddyName);
			
			var cursor:File = this.dir.resolvePath(buddyName); 
			
			return recurseOnBuddyDir(buddyId, cursor);
		}
		
		private function recurseOnBuddyDir(buddyId:int, file:File):Array {
			var tmp:Array = [];
			var ct:int = 0;
            var fileSize:int = 0;
            var ts:Date = new Date(0, 0, 0, 0, 0, 0);
			if (file.isDirectory) {
				var files:Array = file.getDirectoryListing();
				for each (var subFile:File in files) {
					tmp = recurseOnBuddyDir(buddyId, subFile);
					ct += tmp[0];
					fileSize += tmp[1];
					if (tmp[2] > ts) ts = tmp[2];
				}
			} else {
				BuddyLogEntry.create(this.conn, this.CURRENT_ACCT[1], buddyId, file.url);
				ct = 1;
				fileSize = file.size;
				ts = file.modificationDate;
			}
			return [ct, fileSize, ts];
		}
		
		/**
		 * For each selected item in the list, gathers all BuddyLogEntries per buddy and hands
		 * visualize() an Array of DataLists 
		 */
		private function handleItemClick(e:ListEvent):void {
			trace(summaryGrid.selectedItem.toString());
			
			var selected:Array = summaryGrid.selectedItems;
			var all:Data = new Data();
			var cols:Array = [];
			var bles:Array = [];
			for each (var bs:Object in selected) {
				bs = (bs as BuddySummary);
				bles = BuddyLogEntry.getFieldForUser(this.conn, this.userId, BuddyLogEntry.SIZE, bs.buddyId, bs.buddySN);
				var sprite:DataSprite = all.addNode();
				for each (var entry:Object in bles) {
					trace(entry.buddySN+", startTime: "+entry.startTime+", field: "+entry.field);
                    cols.push(entry.startTime);
					sprite.name = entry.buddySN;
					
					sprite.data[entry.startTime] = entry.field;
				}
			}
			
			trace(cols.sort(Util.dateCmpFunction).toString());
			visualize({ data: all, columns: cols.sort(Util.dateCmpFunction) });
		}
		
		private function createTables():void {
			this.conn.begin();
			
			var createStmt:SQLStatement = new SQLStatement();
			createStmt.sqlConnection = this.conn;
			var sql:String = "create table if not exists users (id integer primary key, screenname text); ";
			sql += "create table if not exists conversations (";
			sql += "id integer primary key, user_id integer, buddy_id integer,";
            sql += "size integer, initiated integer, msgs_user integer, msgs_buddy integer,";
            sql += "start_time datetime, end_time datetime, timestamp datetime);";
            createStmt.text = sql;
            
            try {
            	createStmt.execute();
            	this.conn.commit();
                trace('tables created');
            } catch (error:SQLError) {
            	this.conn.rollback();
                trace("Error creating table");
				trace("CREATE TABLE error:", error);
				trace("error.message:", error.message);
				trace("error.details:", error.details);
				return;
            }
		}
		
		private function convertNewFormat():void {
			trace('Backing up your logs...' + dir.url);
			
			try {
//      copytree(self.path, self.path+'.bk')
//      print '''Converting chatlog structures...'''
//      for username in self.acct_logs:
//        if username == '.DS_Store': continue
//        for dir_entry in os.listdir(join(self.path, username)):
//          chatlog = join(self.path, username, dir_entry)
//          if dir_entry == '.DS_Store': os.remove(chatlog); continue
//          if isfile(chatlog):
//            dir, fn = split(chatlog)
//            os.rename(chatlog, chatlog+'2')
//            os.renames(chatlog+'2', join(dir, fn, fn.rsplit('.',1)[0]+'.xml'))
//      rmtree(self.path+'bk')
			} catch (e:Error) {
				trace('backup already exists. did the process not finish last time?');
			}
		}
        ]]>
    </mx:Script>	
    <mx:DataGrid id="summaryGrid"
    	   dataProvider="{this.buddies}" itemClick="handleItemClick(event)"
    	   allowMultipleSelection="true"
           width="40%" height="75%">
        <mx:columns>
            <mx:DataGridColumn headerText="screen name" minWidth="50" dataField="buddySN"/>
            <mx:DataGridColumn headerText="#" dataField="ct"/>
            <mx:DataGridColumn headerText="bytes" dataField="size"/>
            <mx:DataGridColumn headerText="last modified" minWidth="70" dataField="ts"/>
        </mx:columns>
    </mx:DataGrid>
</mx:WindowedApplication>
