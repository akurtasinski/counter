<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
    creationComplete="onLoad()" width="700" height="500">
    <mx:Style source="assets/styles.css"/>
    <mx:Script>
        <![CDATA[
        	import flare.data.DataTable;
        	import flare.data.DataUtil;
        	import flare.data.DataField;
        	import flare.data.DataSource;
        	import flare.data.DataSet;
        	import flare.data.DataSchema;
        	import mx.core.UIComponent;
        	import flare.vis.operator.encoder.ShapeEncoder;
        	import flare.scale.ScaleType;
        	import flare.vis.operator.encoder.ColorEncoder;
        	import flare.vis.operator.layout.AxisLayout;
        	import flare.vis.Visualization;
        	import flare.vis.data.Data;
        	import mx.events.ListEvent;
        	import model.*;
        private const ACCTS:Array = [['AIM', 'cyenatwork'], ['AIM', 'thensheburns'], ['GTalk','christineyen@gmail.com'], ['GTalk', 'temp']];
        private const CURRENT_ACCT:Array = ACCTS[0];
        private var userId:int; 
        
		private var dir:File;
		private var conn:SQLConnection;
		[Bindable] private var buddies:Array;
		
		private var convSchema:DataSchema = new DataSchema(
		    new DataField('buddySN', DataUtil.STRING),
		    new DataField('size', DataUtil.INT),
		    new DataField('initiated', DataUtil.BOOLEAN),
		    new DataField('msgsTotal', DataUtil.INT),
		    new DataField('msgsUser', DataUtil.INT),
		    new DataField('duration', DataUtil.INT),
		    new DataField('startTime', DataUtil.DATE));
	    var dt:DataTable;
	    var ds:DataSet;
	    var d:Data;
	    var graph:UIComponent;
		
		private function onLoad():void {
            this.graph = new UIComponent();
            this.addChild(graph);
			
			this.dir = File.userDirectory.resolvePath('Library/Application Support/Adium 2.0/Users/Default/LogsBackup/' + CURRENT_ACCT.join('.'));
			var sqlFile:File = File.applicationStorageDirectory.resolvePath('db/' + CURRENT_ACCT.join('.') + '.db');
			
			this.conn = new SQLConnection();
            
            try {
	            conn.open(sqlFile, SQLMode.UPDATE);
	            conn.attach('incendio', sqlFile);
                trace('opened database');            	
            } catch (error:SQLError) {
                trace("Error opening database");
				trace("error.message:", error.message);
				trace("error.details:", error.details);
				return;
            }
			
			this.createTables();
            
            convertNewFormat();
			this.userId = Util.getUser(this.conn, this.CURRENT_ACCT[1]);
			
			this.buddies = BuddySummary.getAll(this.conn, this.userId);
		}
		
		// TODO: move me
		private function visualize(arr:Array):void {
			trace(arr.toString());
			
            this.dt = new DataTable(arr, convSchema);
            this.ds = new DataSet(dt);
            this.d = Data.fromDataSet(ds);
            trace(d.toString());
            
            var vis:Visualization = new Visualization(d);
            vis.bounds = new Rectangle(300, 50, 350, 350);
            
            return;
 
            vis.operators.add(new AxisLayout("data.msgsTotal", "data.size"));
//            vis.operators.add(new ColorEncoder("data.cause", Data.NODES,
//                "lineColor", ScaleType.CATEGORIES));
            vis.operators.add(new ShapeEncoder("data.initiated"));
            vis.data.nodes.setProperties({fillColor:0, lineWidth:1});
            vis.update();
            
            this.graph.addChild(vis);
		}
		
		private function fetchSummaries():Array {
			var allData:Array = [];
            for each (var buddyDir:File in this.dir.getDirectoryListing()) {
                if (buddyDir.name == '.DS_STORE') continue;
                allData.push(this.getSummary(buddyDir.name));
            }
			return allData;
		}
		
		private function getSummary(buddyName:String):BuddySummary {
			var bs:BuddySummary = new BuddySummary(buddyName, -1, this.conn);
			
			if (bs.nil() || bs.ts < this.dir.resolvePath(buddyName).modificationDate) {
				var attrs:Array = loadSummary(buddyName);
				bs.ct = attrs[0];
				bs.size = attrs[1];
				bs.ts = attrs[2];
			} else {
                trace('got data for ' + buddyName + ': ' + bs.toString());
			}
			return bs;
		}
		
		private function loadSummary(buddyName:String):Array {
			trace('calculating data for ' + buddyName)
			var ct:int = 0;
			var size:int = 0;
			var buddyId:int = Util.getUser(this.conn, buddyName);
			
			var cursor:File = this.dir.resolvePath(buddyName); 
			
			return recurseOnBuddyDir(buddyId, cursor);
		}
		
		private function recurseOnBuddyDir(buddyId:int, file:File):Array {
			var tmp:Array = [];
			var ct:int = 0;
            var fileSize:int = 0;
            var ts:Date = new Date(0, 0, 0, 0, 0, 0);
			if (file.isDirectory) {
				var files:Array = file.getDirectoryListing();
				for each (var subFile:File in files) {
					tmp = recurseOnBuddyDir(buddyId, subFile);
					ct += tmp[0];
					fileSize += tmp[1];
					if (tmp[2] > ts) ts = tmp[2];
				}
			} else {
				BuddyLogEntry.create(this.conn, this.CURRENT_ACCT[1], buddyId, file.url);
				ct = 1;
				fileSize = file.size;
				ts = file.modificationDate;
			}
			return [ct, fileSize, ts];
		}
		
		private function clickUserName(e:ListEvent):void {
			trace(summaryGrid.selectedItem.toString());
			
			var bs:BuddySummary = (summaryGrid.selectedItem as BuddySummary);
			var all:Array = BuddyLogEntry.getAllForUser(this.conn, this.userId, bs.buddyId, bs.buddySN);
//			trace(all.join("\n"));
			
			visualize(all);
			
//            var dataArr:Array = [
//                {buddySN: 'alpha', size: 1000, initiated: true, msgsTotal: 100, msgsUser: 40, duration: 24, startTime: new Date()},
//                {buddySN: 'alpha', size: 3240, initiated: false, msgsTotal: 150, msgsUser: 10, duration: 43, startTime: new Date()},
//                {buddySN: 'beta', size: 2028, initiated: false, msgsTotal: 87, msgsUser: 64, duration: 47, startTime: new Date()},
//                {buddySN: 'gamma', size: 246, initiated: true, msgsTotal: 21, msgsUser: 4, duration: 102, startTime: new Date()},
//                {buddySN: 'gamma', size: 1000, initiated: false, msgsTotal: 31, msgsUser: 24, duration: 31, startTime: new Date()}
//            ];
		}
		
		private function createTables():void {
			this.conn.begin();
			
			var createStmt:SQLStatement = new SQLStatement();
			createStmt.sqlConnection = this.conn;
			var sql:String = "create table if not exists users (id integer primary key, screenname text); ";
			sql += "create table if not exists conversations (";
			sql += "id integer primary key, user_id integer, buddy_id integer,";
            sql += "size integer, initiated integer, msgs_user integer, msgs_buddy integer,";
            sql += "start_time datetime, end_time datetime, timestamp datetime);";
            createStmt.text = sql;
            
            try {
            	createStmt.execute();
            	this.conn.commit();
                trace('tables created');
            } catch (error:SQLError) {
            	this.conn.rollback();
                trace("Error creating table");
				trace("CREATE TABLE error:", error);
				trace("error.message:", error.message);
				trace("error.details:", error.details);
				return;
            }
		}
		
		private function convertNewFormat():void {
			trace('Backing up your logs...' + dir.url);
			
			try {
//      copytree(self.path, self.path+'.bk')
//      print '''Converting chatlog structures...'''
//      for username in self.acct_logs:
//        if username == '.DS_Store': continue
//        for dir_entry in os.listdir(join(self.path, username)):
//          chatlog = join(self.path, username, dir_entry)
//          if dir_entry == '.DS_Store': os.remove(chatlog); continue
//          if isfile(chatlog):
//            dir, fn = split(chatlog)
//            os.rename(chatlog, chatlog+'2')
//            os.renames(chatlog+'2', join(dir, fn, fn.rsplit('.',1)[0]+'.xml'))
//      rmtree(self.path+'bk')
			} catch (e:Error) {
				trace('backup already exists. did the process not finish last time?');
			}
		}
        ]]>
    </mx:Script>	
    <mx:DataGrid id="summaryGrid"
    	   dataProvider="{this.buddies}" itemClick="clickUserName(event)"
           width="40%" height="75%">
        <mx:columns>
            <mx:DataGridColumn headerText="screen name" minWidth="50" dataField="buddySN"/>
            <mx:DataGridColumn headerText="#" dataField="ct"/>
            <mx:DataGridColumn headerText="bytes" dataField="size"/>
            <mx:DataGridColumn headerText="last modified" minWidth="70" dataField="ts"/>
        </mx:columns>
    </mx:DataGrid>
</mx:WindowedApplication>
